{"version":3,"sources":["components/Profile/Profile.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/ProfileStatus.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatus","props","useState","editMode","setEditMode","value","status","setStatus","useEffect","className","s","item","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","e","currentTarget","ProfileInfo","profile","Preloader","inRef","React","createRef","descriptionBlock","src","photos","large","userPhoto","alt","isOwner","ref","type","accept","style","display","target","files","savePhoto","button","onClick","current","click","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contacts","facebook","github","instagram","mainLink","twitter","vk","website","youtube","Post","likesCount","likes","setLikes","likeIt","setLikeIt","styles","message","console","log","MyPosts","memo","postElements","posts","map","p","id","addPost","placeholder","newPostText","text","updateNewPostText","textarea","onKeyPress","charCode","MyPostsContainer","connect","state","profilePage","Profile","content","compose","authorizedUserId","auth","isAuth","getUserProfile","getStatus","withRouter","getProfile","useCallback","userId","navigate","useNavigate","useParams"],"mappings":"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","file":"static/js/3.cf44857a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__3_7KM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__33JVh\",\"button\":\"ProfileInfo_button__yJqca\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ProfileStatus_item__ZK2Ak\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1Mq8Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__9cMJ0\",\"posts\":\"MyPosts_posts__3d0Un\",\"textarea\":\"MyPosts_textarea__jzmwN\",\"button\":\"MyPosts_button__A01AX\"};","import React, { ChangeEvent, useEffect, useState } from 'react'\r\nimport s from './ProfileStatus.module.css';\r\n\r\n\r\ntype PropsType = {\r\n    value: string\r\n    updateStatus: (value: string) => void\r\n}\r\n\r\nfunction ProfileStatus(props: PropsType) {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.value)\r\n\r\n\r\n    useEffect(() => {\r\n        setStatus(props.value);\r\n    }, [props.value])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setStatus(props.value);\r\n    }\r\n\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div className={s.item} >\r\n            {!editMode &&\r\n                <div>\r\n                    <b> Status: </b> <span onDoubleClick={activateEditMode}>{props.value || \"-----\"}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div >\r\n                    <input autoFocus onBlur={activateViewMode} \r\n                    onChange={onStatusChange}\r\n                      value={status} />\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatus","import React, { ChangeEvent, RefObject, useRef } from 'react';\r\nimport { ProfileType } from '../../../redux/profile-reducer';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport s from './ProfileInfo.module.css';\r\nimport ProfileStatus from './ProfileStatus';\r\nimport userPhoto from '../../../assets/images/user.png';\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    updateStatus: (value: string) => void\r\n    status: string\r\n    isOwner: boolean\r\n    savePhoto: (file: any) => void\r\n}\r\n\r\n\r\nconst ProfileInfo = (props: PropsType) => {\r\n\r\n    if (!props.profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files !== null) {\r\n            props.savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    // const inputElement = useRef<HTMLInputElement | null>(null);\r\n\r\n const inRef = React.createRef<HTMLInputElement>();\r\n\r\n    // <FaPaperclip />\r\n\r\nreturn (\r\n    <div>\r\n        <div className={s.descriptionBlock}>\r\n            <img src={props.profile.photos.large\r\n                ? props.profile.photos.large\r\n                : userPhoto} className={s.userPhoto} alt='avatar' />\r\n                {\r\n                    props.isOwner && <div> <input ref={inRef} type='file'\r\n                        accept=\".jpg, .jpeg, .png\"\r\n                        style={{display: 'none'}}\r\n                        onChange={onMainPhotoSelected} />\r\n                        <button className={s.button} onClick={() => inRef && inRef.current?.click()} > add photo</button>\r\n                        </div>\r\n                }\r\n            <div>\r\n                <b>Full name</b>: {props.profile.fullName}\r\n            </div>\r\n            <div>\r\n                <ProfileStatus updateStatus={props.updateStatus} value={props.status} />\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {props.profile.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            {props.profile.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills</b>: {props.profile.lookingForAJobDescription}\r\n                </div>\r\n            }\r\n\r\n            <b>About me</b>: {props.profile.aboutMe}\r\n            <p><b>Contacts: </b></p>\r\n            <ul>\r\n                <li>{props.profile.contacts.facebook}</li>\r\n                <li>{props.profile.contacts.github}</li>\r\n                <li>{props.profile.contacts.instagram}</li>\r\n                <li>{props.profile.contacts.mainLink}</li>\r\n                <li>{props.profile.contacts.twitter}</li>\r\n                <li>{props.profile.contacts.vk}</li>\r\n                <li>{props.profile.contacts.website}</li>\r\n                <li>{props.profile.contacts.youtube}</li>\r\n            </ul>\r\n        </div>\r\n    </div>\r\n)\r\n}\r\n\r\nexport default ProfileInfo","import React, { useState } from 'react';\r\nimport styles from './Post.module.css';\r\n\r\ntype PropsType = {\r\n  message: string\r\n  likesCount: number\r\n}\r\n\r\n\r\nconst Post = (props: PropsType) => {\r\n\r\n  const [likes, setLikes] = useState(props.likesCount)\r\n  const [likeIt, setLikeIt] = useState(false)\r\n\r\n\r\n  const handleClick = () => {\r\n    if (!likeIt) {\r\n      setLikes(likes + 1)\r\n      setLikeIt(true)\r\n    } else {\r\n      setLikes(likes - 1)\r\n      setLikeIt(false)\r\n    }\r\n    console.log(likes)\r\n  }\r\n\r\n  return (\r\n    <div className={styles.item}>\r\n      <img src='https://i.pinimg.com/600x315/63/e4/e2/63e4e23fffdb56ee09a20ff630eef6ea.jpg' alt='Ava' />\r\n      {props.message}\r\n      <div>\r\n        <span> \r\n          <button \r\n            onClick={handleClick}\r\n          >\r\n            {likeIt ? \"💙\" : \"🤍\"}\r\n          </button>\r\n        </span> {likes} likes\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post;","import React, { ChangeEvent, KeyboardEvent } from 'react';\r\nimport Post from './Post/Post';\r\nimport styles from './MyPosts.module.css';\r\nimport { PostType } from '../../../redux/profile-reducer';\r\n\r\ntype PropsType = {\r\n  posts: Array<PostType>\r\n  newPostText: string\r\n  addPost: () => void\r\n  updateNewPostText: (text: string) => void\r\n}\r\n\r\nconst MyPosts = React.memo((props: PropsType) => {\r\n\r\n  const postElements = props.posts.map(p =>\r\n    <Post key={p.id} message={p.message} likesCount={p.likesCount} />\r\n  )\r\n\r\n  const addPost = () => {\r\n    props.addPost()\r\n  }\r\n\r\n  const onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    let text = e.currentTarget.value\r\n    props.updateNewPostText(text)\r\n  }\r\n\r\n\r\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLTextAreaElement>) => {\r\n    if (e.charCode === 13) {\r\n      addPost();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <hr />\r\n      <h3>My posts</h3>\r\n      <hr />\r\n      <div>\r\n        <textarea\r\n          placeholder='New Post...'\r\n          value={props.newPostText}\r\n          onChange={onPostChange}\r\n          className={styles.textarea}\r\n          onKeyPress={onKeyPressHandler}\r\n        />\r\n      </div>\r\n      <button onClick={addPost}\r\n        className={styles.button}>Public</button>\r\n\r\n      <div className={styles.posts}>\r\n        {postElements}\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n})\r\n\r\nexport default MyPosts;","\r\nimport { AppRootStateType } from '../../../redux/redux-store';\r\nimport { addPost, PostType, updateNewPostText } from '../../../redux/profile-reducer';\r\nimport { connect } from 'react-redux';\r\nimport MyPosts from './MyPosts';\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    posts: Array<PostType>\r\n    newPostText: string\r\n}\r\n\r\nlet mapStateToProps = (state: AppRootStateType): MapStateToPropsType => ({\r\n    posts: state.profilePage.posts,\r\n    newPostText: state.profilePage.newPostText\r\n})\r\n\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, {\r\n    addPost,\r\n    updateNewPostText\r\n})(MyPosts)\r\n\r\n","import React from 'react';\r\nimport styles from './Profile.module.css';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport { MyPostsContainer } from './MyPosts/MyPostsContainer';\r\nimport { ProfileType } from '../../redux/profile-reducer';\r\n\r\ntype PropsType = {\r\n  profile: ProfileType\r\n  status: string\r\n  updateStatus: (value: string) => void\r\n  savePhoto: (file: any) => void\r\n  isOwner: boolean\r\n}\r\n\r\n\r\nconst Profile = (props: PropsType) => {\r\n\r\n  return (\r\n    <div className={styles.content}>\r\n      <ProfileInfo savePhoto={props.savePhoto} isOwner={props.isOwner} updateStatus={props.updateStatus} status={props.status} profile={props.profile} />\r\n      <MyPostsContainer />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Profile;\r\n\r\n\r\n","import React, { ComponentType, useCallback, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { AppRootStateType } from '../../redux/redux-store';\r\nimport Profile from './Profile';\r\nimport { getUserProfile, getStatus, updateStatus, ProfileType, savePhoto } from \"../../redux/profile-reducer\";\r\nimport { withRouter } from '../../hoc/WithRouter';\r\nimport { compose } from 'redux';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\n\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    authorizedUserId: number\r\n    status: string\r\n    getStatus: (userId: number) => void\r\n    getUserProfile: (userId: string | undefined) => void\r\n    updateStatus: (value: string) => void\r\n    savePhoto: (file: any) => void\r\n}\r\n\r\nconst ProfileContainer = (props: PropsType) => {\r\n\r\n    const getProfile = useCallback((userId: any) => {\r\n        props.getUserProfile(userId)\r\n        props.getStatus(userId)\r\n    }, [])\r\n    \r\n\r\n\r\n    const navigate = useNavigate()\r\n    const { userId } = useParams();\r\n    useEffect(() => {\r\n        if (!userId) {\r\n            let userId = props.authorizedUserId;\r\n            if (!userId) {\r\n                navigate(\"/login\");\r\n            }\r\n            getProfile(userId)\r\n        } else {\r\n            getProfile(userId)\r\n\r\n        }\r\n    }, [])\r\n\r\n    return <Profile {...props}\r\n    isOwner={!userId}\r\n        profile={props.profile}\r\n        status={props.status}\r\n        updateStatus={props.updateStatus}\r\n        savePhoto={props.savePhoto}\r\n    />\r\n\r\n\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport default compose<ComponentType>(\r\n    // WithAuthRedirect,\r\n    connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto }),\r\n    withRouter,\r\n)(ProfileContainer)\r\n"],"sourceRoot":""}