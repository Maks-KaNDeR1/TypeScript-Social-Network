{"version":3,"sources":["pages/Chat/ChatPage.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js"],"names":["Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","Messages","obj","TypeError","messages","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","Message","message","id","ref","React","memo","console","log","src","photo","width","userName","AddMessageForm","setMessage","onChange","value","disabled","onClick","sendMessage","ChatPage"],"mappings":"uLAaMA,EAAiB,WAEnB,IAAMC,EAAWC,cAGXC,EAASC,aAAY,SAACC,GAAD,OAA6BA,EAAMC,KAAKH,UASnE,OAPAI,qBAAU,WAEN,OADAN,EAASO,eACF,WACHP,EAASQ,kBAEd,IAEI,gCACS,UAAXN,GAAsB,8EACvB,qCACI,cAAC,EAAD,IACA,cAAC,EAAD,WAKNO,EAAyB,SAAC,ICpCjB,SAAmCC,GAChD,GAAW,MAAPA,EAAa,MAAM,IAAIC,UAAU,gCDmCE,IACrC,IAAMC,EAAWT,aAAY,SAACC,GAAD,OAA6BA,EAAMC,KAAKO,YAC/DC,EAAoBC,iBAAuB,MAFb,EAGIC,oBAAS,GAHb,mBAG7BC,EAH6B,KAGfC,EAHe,KAoBpC,OANAX,qBAAU,WACa,IAAD,EAAdU,IACA,UAAAH,EAAkBK,eAAlB,SAA2BC,eAAe,CAAEC,SAAU,cAE3D,CAACR,IAEG,sBAAKS,MAAO,CAAEC,OAAQ,QAASC,UAAW,QAAUC,SAfrC,SAACC,GACnB,IAAMC,EAAUD,EAAEE,cACdC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,KAC7EhB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAUjC,UACFL,EAASqB,KAAI,SAACC,EAAGC,GAAJ,OAAc,cAACC,EAAD,CAAoBC,QAASH,GAAfA,EAAEI,OAC5C,qBAAKC,IAAK1B,QAKZuB,EAAqDI,IAAMC,MAAK,YAAkB,IAAfJ,EAAc,EAAdA,QAErE,OADAK,QAAQC,IAAI,iBACL,gCACH,qBAAKC,IAAKP,EAAQQ,MAAOxB,MAAO,CAAEyB,MAAO,UADtC,IACmD,4BAAIT,EAAQU,WAClE,uBACCV,EAAQA,QACT,6BAKFW,EAA+B,WAAO,IAAD,EACTjC,mBAAS,IADA,mBAChCsB,EADgC,KACvBY,EADuB,KAEjCjD,EAAWC,cAEXC,EAASC,aAAY,SAACC,GAAD,OAA6BA,EAAMC,KAAKH,UAWnE,OAAO,gCACH,8BACI,0BAAUgD,SAAU,SAACzB,GAAD,OAAOwB,EAAWxB,EAAEE,cAAcwB,QAAQA,MAAOd,MAEzE,8BACI,wBAAQe,SAAqB,UAAXlD,EAAoBmD,QAbnB,WAClBhB,IAGLrC,EAASsD,YAAYjB,IACrBY,EAAW,MAQP,wBAKGM,UA5FY,WACvB,OAAO,8BACH,cAAC,EAAD","file":"static/js/5.5e32ca5b.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\r\nimport { ChatMessageAPIType } from '../../api/chat-api'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { sendMessage, startMessagesListening, stopMessagesListening } from './chat-reducer'\r\nimport { AppRootStateType } from '../../redux/redux-store'\r\n\r\n\r\nconst ChatPage: React.FC = () => {\r\n    return <div>\r\n        <Chat />\r\n    </div>\r\n}\r\n\r\nconst Chat: React.FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const status = useSelector((state: AppRootStateType) => state.chat.status)\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening())\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n        }\r\n    }, [])\r\n\r\n    return <div>\r\n        {status === 'error' && <div>Some error occured. Please refresh the page</div>}\r\n        <>\r\n            <Messages />\r\n            <AddMessageForm />\r\n        </>\r\n    </div>\r\n}\r\n\r\nconst Messages: React.FC<{}> = ({ }) => {\r\n    const messages = useSelector((state: AppRootStateType) => state.chat.messages)\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null);\r\n    const [isAutoScroll, setIsAutoScroll] = useState(true)\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget;\r\n        if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\r\n            !isAutoScroll && setIsAutoScroll(true)\r\n        } else {\r\n            isAutoScroll && setIsAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isAutoScroll) {\r\n            messagesAnchorRef.current?.scrollIntoView({ behavior: 'smooth' })\r\n        }\r\n    }, [messages])\r\n\r\n    return <div style={{ height: '400px', overflowY: 'auto' }} onScroll={scrollHandler}>\r\n        {messages.map((m, index) => <Message key={m.id} message={m} />)}\r\n        <div ref={messagesAnchorRef}></div>\r\n    </div>\r\n}\r\n\r\n\r\nconst Message: React.FC<{ message: ChatMessageAPIType }> = React.memo(({ message }) => {\r\n    console.log(\">>>>>>Message\")\r\n    return <div>\r\n        <img src={message.photo} style={{ width: '30px' }} /> <b>{message.userName}</b>\r\n        <br />\r\n        {message.message}\r\n        <hr />\r\n    </div>\r\n})\r\n\r\n\r\nconst AddMessageForm: React.FC<{}> = () => {\r\n    const [message, setMessage] = useState('')\r\n    const dispatch = useDispatch()\r\n\r\n    const status = useSelector((state: AppRootStateType) => state.chat.status)\r\n\r\n\r\n    const sendMessageHandler = () => {\r\n        if (!message) {\r\n            return\r\n        }\r\n        dispatch(sendMessage(message))\r\n        setMessage('')\r\n    }\r\n\r\n    return <div>\r\n        <div>\r\n            <textarea onChange={(e) => setMessage(e.currentTarget.value)} value={message}></textarea>\r\n        </div>\r\n        <div>\r\n            <button disabled={status !== 'ready'} onClick={sendMessageHandler}>Send</button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default ChatPage\r\n","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}"],"sourceRoot":""}