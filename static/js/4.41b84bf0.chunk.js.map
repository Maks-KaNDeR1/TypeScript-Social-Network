{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/AlternativeMessage/AlternativeMessage.module.css","components/Dialogs/DialodsItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AlternativeMessage/AlternativeMessage.tsx","components/Dialogs/Dialogs.tsx","hoc/WithAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","path","id","className","styles","dialog","active","src","alt","to","name","Message","s","displaySent","message","style","justifyContent","description","borderRadius","nameSent","textSent","timeSent","time","angleSent","avatar","display","angle","text","AlternativeMessage","useState","title","setTitle","addMessage","trim","setTimeout","scroll","current","scrollIntoView","behavior","items","type","placeholder","value","onChange","event","currentTarget","onKeyPress","e","charCode","onClick","Dialogs","dialogsElements","dialogs","map","d","messageElements","m","React","useRef","dialogsItems","dialogF","overflow","height","WebkitOverflowScrolling","ref","margin","marginLeft","mapStateToPropsForRedirect","state","isAuth","auth","WithAuthRedirect","Component","RedirectComponent","this","connect","compose","withAuthRedirect","dialogsPage"],"mappings":"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","file":"static/js/4.41b84bf0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__6rxj1\",\"dialogsItems\":\"Dialogs_dialogsItems__3gA3l\",\"active\":\"Dialogs_active__2MX0L\",\"dialog\":\"Dialogs_dialog__EU5iR\",\"messages\":\"Dialogs_messages__9dv1e\",\"message\":\"Dialogs_message__1aPDA\",\"dialogF\":\"Dialogs_dialogF__NiBx-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Message_display__1EHVd\",\"message\":\"Message_message__ABkZL\",\"description\":\"Message_description__3trQ6\",\"angle\":\"Message_angle__2v-k7\",\"angleSent\":\"Message_angleSent__1R_z6\",\"name\":\"Message_name__2eLj0\",\"text\":\"Message_text__2Dm9O\",\"time\":\"Message_time__1ODfc\",\"nameSent\":\"Message_nameSent__2sRcT\",\"textSent\":\"Message_textSent__2-uh7\",\"timeSent\":\"Message_timeSent__1bH7-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"items\":\"AlternativeMessage_items__3Zmak\"};","import { NavLink } from 'react-router-dom'\r\nimport styles from './../Dialogs.module.css'\r\n\r\ntype DialodsItemPropsType = {\r\n    id: number\r\n    name: string\r\n    src: string\r\n}\r\n\r\n\r\nconst DialogItem = (props: DialodsItemPropsType) => {\r\n\r\n    const path = \"/dialogs/\" + props.id;\r\n\r\n    return (\r\n        <div className={styles.dialog + ' ' + styles.active}>\r\n            <img src={props.src} alt='ava' />\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default DialogItem\r\n\r\n\r\n","import s from './Message.module.css'\r\n\r\ntype PropsType = {\r\n    id?: number\r\n    avatar: string\r\n    name: string\r\n    message: string\r\n    time: any\r\n}\r\n\r\n\r\nconst Message = (props: PropsType) => {\r\n\r\n    if (props.name === 'Maksim') {\r\n        return (\r\n            <div className={s.displaySent}>\r\n                <div className={s.message} style={{  justifyContent: 'flex-end'}} >                \r\n                //justify-content: flex-end;\r\n                    <div className={s.description} style={{ borderRadius: '26px 28px 0 26px' }}>\r\n                        <div className={s.nameSent}>{props.name}</div>\r\n                        <div className={s.textSent}>{props.message}</div>\r\n                        <span className={s.timeSent}>{props.time}</span>\r\n                    </div>\r\n\r\n                    <div className={s.angleSent} />\r\n\r\n                    <img src={props.avatar} alt={'avatar'} />\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className={s.display}>\r\n                <div className={s.message}>\r\n                    <img src={props.avatar} alt={'avatar'} />\r\n\r\n                    <div className={s.angle} />\r\n\r\n                    <div className={s.description}>\r\n                        <div className={s.name}>{props.name}</div>\r\n                        <div className={s.text}>{props.message}</div>\r\n                        <span className={s.time}>{props.time}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport default Message\r\n\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react'\r\nimport s from './AlternativeMessage.module.css'\r\n\r\ntype PropsType = {\r\n    addMessage: (title: string) => void\r\n    scroll: any\r\n}\r\n\r\nfunction AlternativeMessage(props: PropsType) {\r\n\r\n    const [title, setTitle] = useState('')\r\n\r\n    const addMessage = () => {\r\n\tif (title.trim() !== '') {\r\n        props.addMessage(title)\r\n        setTitle('')\r\n        setTimeout(() => {\r\n            props.scroll.current.scrollIntoView({ behavior: 'smooth' })\r\n        }, 0)\r\n\t\t}\r\n    }\r\n\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value)\r\n    }\r\n\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.charCode === 13) {\r\n            addMessage()\r\n        }\r\n    }\r\n\r\n    return (\r\n        \r\n        <div className={s.items} >\r\n             <input type='text'\r\n                 placeholder=' New message...'\r\n                    value={title}\r\n                    onChange={onChangeHandler}\r\n                    onKeyPress={onKeyPressHandler}\r\n                     />\r\n                <button onClick={addMessage} >Send</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default AlternativeMessage\r\n","\r\nimport React from 'react'\r\nimport DialogItem from './DialodsItem/DialogsItem';\r\nimport Message from './Message/Message';\r\nimport s from './Dialogs.module.css'\r\nimport { DialogsType, MessageType } from '../../redux/dialogs-reducer';\r\nimport AlternativeMessage from './AlternativeMessage/AlternativeMessage';\r\n\r\n\r\ntype PropsType = {\r\n    dialogs: Array<DialogsType>\r\n    message: Array<MessageType>\r\n    addMessage: () => void\r\n}\r\n\r\n\r\nfunction Dialogs(props: PropsType) {\r\n\r\n    const dialogsElements = props.dialogs.map(d =>\r\n        <DialogItem name={d.name} key={d.id} id={d.id} src={d.src} />\r\n    )\r\n\r\n    const messageElements = props.message.map(m =>\r\n        <Message key={m.id}\r\n            id={m.id} avatar={m.avatar} name={m.name} message={m.message} time={m.time}\r\n        />\r\n    )\r\n\r\n//#002733;\r\n    const scroll = React.useRef(null)\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.dialogF} style={{ overflow: 'auto', height: '500px', WebkitOverflowScrolling: \"touch\" }}>\r\n                {messageElements}\r\n                <div ref={scroll} ></div>\r\n            </div>\r\n            <div />\r\n            <div style={{ margin: '15px', marginLeft: '340px' }} >\r\n                <AlternativeMessage\r\n                    addMessage={props.addMessage}\r\n                    scroll={scroll}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Dialogs\r\n","import React from 'react'\r\nimport { Navigate } from 'react-router-dom'\r\nimport { connect } from 'react-redux';\r\nimport { AppRootStateType } from '../redux/redux-store';\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state: AppRootStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\ntype PropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\n\r\nexport const WithAuthRedirect = (Component: any) => {\r\n   \r\n    class RedirectComponent extends React.Component<any, PropsType> {\r\n        render() {\r\n            if (!this.props.isAuth) return <Navigate to='/login' />\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n   \r\n    let ConectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n    return ConectedAuthRedirectComponent;\r\n}\r\n\r\n\r\nexport default WithAuthRedirect","\r\nimport { AppRootStateType } from '../../redux/redux-store';\r\nimport { addMessage, DialogsType, MessageType } from '../../redux/dialogs-reducer';\r\nimport { connect } from 'react-redux';\r\nimport Dialogs from './Dialogs';\r\nimport withAuthRedirect from '../../hoc/WithAuthRedirect';\r\nimport { compose } from 'redux';\r\nimport { ComponentType } from 'react';\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    dialogs: Array<DialogsType>\r\n    message: Array<MessageType>\r\n}\r\n\r\nlet mapStateToProps = (state: AppRootStateType): MapStateToPropsType => ({\r\n    dialogs: state.dialogsPage.dialogs,\r\n    message: state.dialogsPage.message,\r\n})\r\n\r\nexport default compose<ComponentType>(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, { addMessage }),\r\n)(Dialogs)\r\n\r\n\r\n\r\n"],"sourceRoot":""}